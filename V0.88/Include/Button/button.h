
/**@brief Function for handling events from the button handler module.
*
* @param[in] pin_no        The pin that the event applies to.
* @param[in] button_action The button action (press/release).
*/
static void button_event_handler(uint8_t pin_no, uint8_t button_action)
{
  NRF_LOG_RAW_INFO("EVENTO DE BOTON PRESIONADO  boton %i  y evento %i \r\n", pin_no,button_action);
  NRF_LOG_FLUSH();
  switch (pin_no)
  {
  case LEDBUTTON_BUTTON_PIN:
    
    if (button_action==1) 
    {
      Boton_Presionado = true;
      Time_button_pressed=0;}
    if (button_action==0) 
    {
      Boton_Presionado = false;
      Time_button_pressed=0;
      if (device_sleep)
      {
        
        //Tipo_dispositivo = data_flash[29];
        Tipo_dispositivo = Flash_array.Type_sensor;
        
        Wakeup_by_button=true;
        device_sleep=false; 
        NRF_LOG_RAW_INFO("BOTON PRESIONADO y equipo despertado \r\n");
        NRF_LOG_FLUSH();    
      }
    }
    break;
    
  default:
    APP_ERROR_HANDLER(pin_no);
    break;
  }
}

/**@brief Function for initializing the button handler module.
*/
static void buttons_init(void)
{
  ret_code_t err_code;
  //The array must be static because a pointer to it will be saved in the button handler module.
  static app_button_cfg_t buttons[] =
  {
    {LEDBUTTON_BUTTON_PIN, false, BUTTON_PULL, button_event_handler}
  };
  err_code = app_button_init(buttons, ARRAY_SIZE(buttons),
                             BUTTON_DETECTION_DELAY);
  APP_ERROR_CHECK(err_code);
}

/**@brief Function for handling events from the BSP module.
*
* @param[in]   event   Event generated by button press.
*/
void bsp_event_handler(bsp_event_t event)
{
  uint32_t err_code;
  switch (event)
  {
  case BSP_EVENT_SLEEP:
    sleep_mode_enter();
    break;
    
  case BSP_EVENT_DISCONNECT:
    err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
    if (err_code != NRF_ERROR_INVALID_STATE)
    {
      APP_ERROR_CHECK(err_code);
    }
    break;
    
  case BSP_EVENT_WHITELIST_OFF:
    if (m_conn_handle == BLE_CONN_HANDLE_INVALID)
    {
      err_code = ble_advertising_restart_without_whitelist(&m_advertising);
      if (err_code != NRF_ERROR_INVALID_STATE)
      {
        APP_ERROR_CHECK(err_code);
      }
    }
    break;  
    
  default:
    break;
  }
}